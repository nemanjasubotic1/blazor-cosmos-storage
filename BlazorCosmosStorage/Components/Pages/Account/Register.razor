@page "/account/register"
@rendermode InteractiveServer

@inject RoleManager<IdentityRole> _RoleManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject UserManager<ApplicationUser> _UserManager
@inject NavigationManager _NavigationManager


<PageTitle>Register</PageTitle>

<div class="mt-5" style="width:100%">
    <div class="h-100 d-flex align-items-center justify-content-center">
        <div class="card bg-light" style="min-width: 28rem;">
            <div class="card-body">
                <h5 class="card-title text-center display-6">Sign Up</h5>


                <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="login">
                    <DataAnnotationsValidator />
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.FullName" id="Input.FullName" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.FullName" class="form-label">Full Name</label>
                        <ValidationMessage For="() => Input.FullName" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="Input.ConfirmPassword">Confirm Password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.Role" id="Input.Role" class="form-select" aria-required="true">
                            <option value="">--Select Role--</option>
                            <option value="@SD.Role_Admin">Administrator</option>
                            <option value="@SD.Role_Customer">Customer</option>
                        </InputSelect>
                        <label for="Input.Role">Select Role</label>
                    </div>
                    <div class="mb-3 text-center">
                        <span class="text-danger">@Message</span>
                    </div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    </div>
                </EditForm>
                <br />
                <hr />
            </div>
        </div>
    </div>
</div>




@code {
    private string Message { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task RegisterUser()
    {

        // Creating roles in database
        if (!await _RoleManager.RoleExistsAsync(SD.Role_Admin))
        {
            await _RoleManager.CreateAsync(new IdentityRole(SD.Role_Admin));
            await _RoleManager.CreateAsync(new IdentityRole(SD.Role_Customer));
        }

        // Proceed to Register User
        ApplicationUser user = new()
            {
                FullName = Input.FullName,
                Email = Input.Email,
                UserName = Input.Email,
                NormalizedEmail = Input.Email.ToUpper(),
            };

        var result = await _UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {

            if (Input.Role is not null)
            {
                await _UserManager.AddToRoleAsync(user, Input.Role);
            }
            else
            {
                await _UserManager.AddToRoleAsync(user, SD.Role_Customer);
            }

            _NavigationManager.NavigateTo("/");
        }
        else
        {
            Message = "Something is wrong with registration process!";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string FullName { get; set; } = "";

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }

        public string? Role { get; set; }

    }
}
