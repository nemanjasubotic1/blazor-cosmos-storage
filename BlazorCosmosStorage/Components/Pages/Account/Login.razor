@page "/account/login"

@inject SignInManager<ApplicationUser> _SignInManager
@inject UserManager<ApplicationUser> _UserManager
@inject NavigationManager _NavigationManager

<PageTitle>Log in</PageTitle>

<div class="mt-5" style="width:100%">
    <div class="h-100 d-flex align-items-center justify-content-center">
        <div class="card bg-light" style="min-width: 28rem;">
            <div class="card-body">
                <h5 class="card-title text-center display-6">Sign In</h5>

                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="mb-3 text-center">
                        <span class="text-danger">@Message</span>
                    </div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    </div>
                </EditForm>
                <br />
                <hr />
            </div>
        </div>
    </div>
</div>

@code {


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private string Message { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task LoginUser()
    {

        var result = await _SignInManager.PasswordSignInAsync(Input.Email, Input.Password, isPersistent: Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            _NavigationManager.NavigateTo("/");
        }
        else
        {
            Message = "Invalid login credentials.";
        }

    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
